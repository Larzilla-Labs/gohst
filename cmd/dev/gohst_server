#!/bin/bash
SCRIPT_ROOT="$(cd "$(dirname "$0")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_ROOT/../.." && pwd)"
VITE_PROCESS="$ROOT_DIR/cmd/dev/vite_process"
APP_CMD="go run cmd/web/main.go"

# Load .env file if it exists
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
fi

# Read APP_PORT from the environment or default to 5000
APP_PORT=${APP_PORT:-3030}

gohst_log_header() {
    echo "
      ██████╗  ██████╗ ██╗  ██╗███████╗████████╗
     ██╔════╝ ██╔═══██╗██║  ██║██╔════╝╚══██╔══╝
     ██║  ███╗██║   ██║███████║███████╗   ██║
     ██║   ██║██║   ██║██╔══██║╚════██║   ██║
     ╚██████╔╝╚██████╔╝██║  ██║███████╗   ██║
      ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚══════╝   ╚═╝

 ---------------------------------------------------

 👻👻👻 GOHST DEVELOPMENT SERVER STARTING... 👻👻👻

 ---------------------------------------------------

 Using port: $APP_PORT

"
}

# Function to determine the correct watch command based on OS
get_watch_command() {
    # Mac OS
    if [[ "$(uname -s)" == "Darwin" ]]; then
        echo "fswatch -r --event Updated --event Created --event Removed \
            -e '/\.git/' \
            -e '/\.git/index.lock' \
            -e '/vendor/' \
            -e '/cmd/dev/' \
            -e '/tmp/' \
            -e '/node_modules/' \
            -e '/static/dist/' \
            -e '/static/.vite/' \
            -e '/logs/' \
            -e '\.rdb$' \
            \"$WATCH_DIR_ABS\""
    # Linux Distros
    elif [[ "$(uname -s)" == "Linux" ]]; then
        echo "inotifywait -m -r -e modify,create,delete \
            --exclude '(\.git|vendor|cmd/dev|tmp|node_modules|static/dist|static/.vite|logs|\.rdb)' \
            \"$WATCH_DIR_ABS\""
    else
        echo "❌❌❌ Unsupported OS. Exiting. ❌❌❌" >&2
        exit 1
    fi
}

# Watch for changes in the WATCH_DIR
watch_for_changes() {
    # Convert WATCH_DIR to an absolute path
    WATCH_DIR="$ROOT_DIR"

    echo "🔄 Watching for file changes in $WATCH_DIR - Restarting on changes!"
     # Restart the application
    echo "🚀 Starting Gohst server..."
    cd "$ROOT_DIR" || exit 1
    gohst_log_header > "tmp/gohst.log"
    nohup $APP_CMD >> tmp/gohst.log 2>&1 & disown
    echo "👻 Gohst server started! 👻"
    echo "----------------------------"
    echo "Go to: $APP_URL"
    echo ""

    WATCH_CMD=$(get_watch_command)

    eval $WATCH_CMD | while read FILE_CHANGE; do
        clear

        # Stop Vite
        "$VITE_PROCESS" "stop"

        # Ensure FILE_CHANGE is not empty
        if [ -n "$FILE_CHANGE" ]; then
            echo "🔍 Change detected: $FILE_CHANGE"
        else
            echo "❗️ No file change detected! Check $WATCH_DIR path or exclusions."
            continue
        fi

        echo "🔄 Detected changes. Restarting server..."

        # Kill process running on APP_PORT
        echo "🛑 Stopping process on port $APP_PORT..."
        echo -n "⌛ Waiting for process to fully exit..."
        # Wait until the port is free
        until ! lsof -ti :$APP_PORT >/dev/null; do
            echo -n "."
            kill -9 $(lsof -ti :$APP_PORT) 2>/dev/null
            sleep 0.2 # Give it some time to fully release
        done

        echo ""
        echo "✅ Process on port $APP_PORT fully stopped!"

        # Restart the application
        echo "🚀 Restarting Gohst server..."
        cd "$ROOT_DIR" || exit 1
        echo "👻 Gohst server restarting..." >> "tmp/gohst.log"
        nohup $APP_CMD >> tmp/gohst.log 2>&1 & disown

        # start Vite
        "$VITE_PROCESS" "start"
        echo "👻 Gohst server restarted! 👻"
        echo ""
    done

    # Kill process running on APP_PORT
    if lsof -ti :$APP_PORT >/dev/null; then
        echo "🛑 Stopping process on port $APP_PORT..."
        kill -9 $(lsof -ti :$APP_PORT)
    fi

    echo ""
    echo ""
    echo "=== 👻 Gohst watch interrupted 👻 ===
    "
}

# Stop the server
stop_server() {
    echo "🛑 Stopping all processes on port $APP_PORT..."
    lsof -ti :$APP_PORT | xargs kill -9 2>/dev/null

    sleep 2

    # Force kill lingering processes
    if lsof -ti :$APP_PORT >/dev/null; then
        lsof -ti :$APP_PORT | xargs kill -9 2>/dev/null
        echo "🛑 Force killed remaining processes!"
    fi

    echo "🛑 Stopped all processes on port $APP_PORT!"
}

# Handle script arguments
case "$1" in
    start)
        watch_for_changes
        ;;
    stop)
        stop_server
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
        ;;
esac
