#!/bin/bash

SCRIPT_ROOT="$(cd "$(dirname "$0")" && pwd)"
ROOT_DIR="$SCRIPT_ROOT/../.."
DATABASE_DIR="$ROOT_DIR/database"
MIGRATION_DIR="$DATABASE_DIR/migrations"
SEED_DIR="$DATABASE_DIR/seeds"
DOCKER_POSTGRES_DIR="$ROOT_DIR/docker/postgres"
DOCKER_DATA_DIR="$DOCKER_POSTGRES_DIR/data"
DOCKER_INIT_DIR="$DOCKER_POSTGRES_DIR/init"
DOCKER_INIT_SQL_PATH="$DOCKER_INIT_DIR/init.sql"

# Clear old SQL files
echo "üîç Removing SQL from within $DOCKER_POSTGRES_DIR..."
"$ROOT_DIR/cmd/dev/docker_sql_clear"
echo "‚úÖ Docker SQL Files cleared at $DOCKER_POSTGRES_DIR!"

# Ensure the docker postgres direcotry exists and clear old SQL files
create_dir_if_not_exists() {
    local dir=$1
    if [ ! -d "$dir" ]; then
        echo "üìÇ Creating directory: $dir"
        mkdir -p "$dir"
    fi
}

# Ensure required directories exist
create_dir_if_not_exists "$DOCKER_POSTGRES_DIR"
create_dir_if_not_exists "$DOCKER_DATA_DIR"
create_dir_if_not_exists "$DOCKER_INIT_DIR"

# Remove any existing SQL files
rm -rf "$DOCKER_POSTGRES_DIR"/*.sql
rm -rf "$DOCKER_DATA_DIR"/*.sql
rm -rf "$DOCKER_INIT_DIR"/*.sql

# Global Counter for SQL file order
global_counter=1

# Function to load environment variables from .env file
load_env() {
    if [ -f .env ]; then
        export $(grep -v '^#' .env | xargs)
    fi
}

# Function to pre-process servers.json
preprocess_servers_json() {
    echo "‚öôÔ∏è Pre-processing servers.json..."
    load_env

    # Check if environment variables are loaded
    if [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ] || [ -z "$DB_NAME" ]; then
        echo "‚ö†Ô∏è  Warning: Environment variables not loaded correctly. servers.json may be blank."
    fi

    # Use a temporary file for envsubst, directly from the template
    envsubst < "$ROOT_DIR/docker/pgadmin/servers.json.template" > "$ROOT_DIR/docker/pgadmin/servers.json"

    echo "‚úÖ servers.json pre-processed!"
}

create_init_sql() {
    load_env

# Create the Postgres init script dynamically
cat > $DOCKER_INIT_SQL_PATH <<EOF
DO \$\$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '$DB_NAME') THEN
        CREATE DATABASE $DB_NAME;
    END IF;
END \$\$;

DO \$\$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '$DB_USER') THEN
        CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';
    END IF;
END \$\$;

GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $DB_USER;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $DB_USER;
EOF

    echo "‚úÖ Postgres initialization script generated at $DOCKER_INIT_SQL_PATH"
}

# Function to copy files in order
copy_files() {
    local src_dir=$1
    local target_dir=$2

    echo "üìÇ Processing directory: $src_dir"

    for file in "$src_dir"/*.sql; do
        [ -f "$file" ] || continue  # Skip if no .sql files exist
        cp "$file" "$target_dir/$(printf "%03d_%s" "$global_counter" "$(basename "$file")")"
        ((global_counter++))
    done
}

# Pre-process servers.json
preprocess_servers_json

# Initialize the database and user permissions
echo "üöÄ Creating Postgres initialization script..."
create_init_sqlgohst

# Copy migrations first (starting from 001)
copy_files "$MIGRATION_DIR" "$DOCKER_DATA_DIR"

# Copy seeds next (continuing counter to ensure migrations run first)
copy_files "$SEED_DIR" "$DOCKER_DATA_DIR"

echo "‚úÖ Migrations and seeds copied to $DOCKER_DATA_DIR in correct order!"
